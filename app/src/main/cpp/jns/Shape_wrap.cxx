/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#include "Shape.hpp"


#include <stdexcept>


#include <vector>
#include <stdexcept>


#include <deque>
#include <stdexcept>

SWIGINTERN std::deque< Vector2< float > >::const_reference std_deque_Sl_Vector2f_Sg__getitem(std::deque< Vector2f > *self,int i){
                int size = int(self->size());
                if (i<0) i += size;
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("deque index out of range");
           }
SWIGINTERN void std_deque_Sl_Vector2f_Sg__setitem(std::deque< Vector2f > *self,int i,Vector2< float > const &x){
                int size = int(self->size());
                if (i<0) i+= size;
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("deque index out of range");
           }
SWIGINTERN void std_deque_Sl_Vector2f_Sg__delitem(std::deque< Vector2f > *self,int i){
                int size = int(self->size());
                if (i<0) i+= size;
                if (i>=0 && i<size) {
                    self->erase(self->begin()+i);
                } else {
                    throw std::out_of_range("deque index out of range");
                }
           }
SWIGINTERN std::deque< Vector2< float > > std_deque_Sl_Vector2f_Sg__getslice(std::deque< Vector2f > *self,int i,int j){
                int size = int(self->size());
                if (i<0) i = size+i;
                if (j<0) j = size+j;
                if (i<0) i = 0;
                if (j>size) j = size;
                std::deque< Vector2< float > > tmp(j-i);
                std::copy(self->begin()+i,self->begin()+j,tmp.begin());
                return tmp;
            }
SWIGINTERN void std_deque_Sl_Vector2f_Sg__setslice(std::deque< Vector2f > *self,int i,int j,std::deque< Vector2< float > > const &v){
                int size = int(self->size());
                if (i<0) i = size+i;
                if (j<0) j = size+j;
                if (i<0) i = 0;
                if (j>size) j = size;
                if (int(v.size()) == j-i) {
                    std::copy(v.begin(),v.end(),self->begin()+i);
                } else {
                    self->erase(self->begin()+i,self->begin()+j);
                    if (i+1 <= size)
                        self->insert(self->begin()+i+1,v.begin(),v.end());
                    else
                        self->insert(self->end(),v.begin(),v.end());
                }
            }
SWIGINTERN void std_deque_Sl_Vector2f_Sg__delslice(std::deque< Vector2f > *self,int i,int j){
                int size = int(self->size());
                if (i<0) i = size+i;
                if (j<0) j = size+j;
                if (i<0) i = 0;
                if (j>size) j = size;
                self->erase(self->begin()+i,self->begin()+j);
            }
SWIGINTERN std::vector< Vector2< float > >::const_reference std_vector_Sl_Vector2f_Sg__get(std::vector< Vector2f > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_Vector2f_Sg__set(std::vector< Vector2f > *self,int i,std::vector< Vector2< float > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_com_westerholmgmail_v_lauri_tunnelescape_ShapeModuleJNI_new_1Shape_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Shape *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Shape *)new Shape();
  *(Shape **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_westerholmgmail_v_lauri_tunnelescape_ShapeModuleJNI_new_1Shape_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2) {
  jlong jresult = 0 ;
  float arg1 ;
  float arg2 ;
  Shape *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = (Shape *)new Shape(arg1,arg2);
  *(Shape **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_westerholmgmail_v_lauri_tunnelescape_ShapeModuleJNI_new_1Shape_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Shape *arg1 = 0 ;
  Shape *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Shape **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Shape const & reference is null");
    return 0;
  } 
  result = (Shape *)new Shape((Shape const &)*arg1);
  *(Shape **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_westerholmgmail_v_lauri_tunnelescape_ShapeModuleJNI_Shape_1getPointer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Shape *arg1 = (Shape *) 0 ;
  Shape *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Shape **)&jarg1; 
  result = (Shape *)(arg1)->getPointer();
  *(Shape **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_westerholmgmail_v_lauri_tunnelescape_ShapeModuleJNI_Shape_1getCenter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Shape *arg1 = (Shape *) 0 ;
  Vector2f *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Shape **)&jarg1; 
  result = (Vector2f *) &(arg1)->getCenter();
  *(Vector2f **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_westerholmgmail_v_lauri_tunnelescape_ShapeModuleJNI_Shape_1getFrame(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Shape *arg1 = (Shape *) 0 ;
  std::deque< Vector2f > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Shape **)&jarg1; 
  result = (std::deque< Vector2f > *) &((Shape const *)arg1)->getFrame();
  *(std::deque< Vector2f > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_com_westerholmgmail_v_lauri_tunnelescape_ShapeModuleJNI_Shape_1getMin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  Shape *arg1 = (Shape *) 0 ;
  Vector2f result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Shape **)&jarg1; 
  result = ((Shape const *)arg1)->getMin();
  {
    jclass jVectClass = jenv->FindClass("com/westerholmgmail/v/lauri/tunnelescape/Vector2f");
    jmethodID jVectConstructor = jenv->GetMethodID(jVectClass, "<init>", "(FF)V");
    jobject jVect = jenv->NewObject(jVectClass, jVectConstructor, (&result)->getX(), (&result)->getY());
    jresult = jVect;
  }
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_com_westerholmgmail_v_lauri_tunnelescape_ShapeModuleJNI_Shape_1getMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  Shape *arg1 = (Shape *) 0 ;
  Vector2f result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Shape **)&jarg1; 
  result = ((Shape const *)arg1)->getMax();
  {
    jclass jVectClass = jenv->FindClass("com/westerholmgmail/v/lauri/tunnelescape/Vector2f");
    jmethodID jVectConstructor = jenv->GetMethodID(jVectClass, "<init>", "(FF)V");
    jobject jVect = jenv->NewObject(jVectClass, jVectConstructor, (&result)->getX(), (&result)->getY());
    jresult = jVect;
  }
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_westerholmgmail_v_lauri_tunnelescape_ShapeModuleJNI_Shape_1getArea(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Shape *arg1 = (Shape *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Shape **)&jarg1; 
  result = (float)((Shape const *)arg1)->getArea();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_westerholmgmail_v_lauri_tunnelescape_ShapeModuleJNI_Shape_1getEdges(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Shape *arg1 = (Shape *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Shape **)&jarg1; 
  result = (int)((Shape const *)arg1)->getEdges();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_westerholmgmail_v_lauri_tunnelescape_ShapeModuleJNI_Shape_1getAxis(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Shape *arg1 = (Shape *) 0 ;
  std::vector< Vector2f > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Shape **)&jarg1; 
  result = (std::vector< Vector2f > *) &(arg1)->getAxis();
  *(std::vector< Vector2f > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_westerholmgmail_v_lauri_tunnelescape_ShapeModuleJNI_Shape_1getWidth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Shape *arg1 = (Shape *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Shape **)&jarg1; 
  result = (float)((Shape const *)arg1)->getWidth();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_westerholmgmail_v_lauri_tunnelescape_ShapeModuleJNI_Shape_1getHeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Shape *arg1 = (Shape *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Shape **)&jarg1; 
  result = (float)((Shape const *)arg1)->getHeight();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_westerholmgmail_v_lauri_tunnelescape_ShapeModuleJNI_delete_1Shape(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Shape *arg1 = (Shape *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Shape **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_westerholmgmail_v_lauri_tunnelescape_ShapeModuleJNI_new_1Vector2f_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2) {
  jlong jresult = 0 ;
  float arg1 ;
  float arg2 ;
  Vector2< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = (Vector2< float > *)new Vector2< float >(arg1,arg2);
  *(Vector2< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_westerholmgmail_v_lauri_tunnelescape_ShapeModuleJNI_new_1Vector2f_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Vector2< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Vector2< float > *)new Vector2< float >();
  *(Vector2< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_westerholmgmail_v_lauri_tunnelescape_ShapeModuleJNI_new_1Vector2f_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Vector2< float > *arg1 = 0 ;
  Vector2< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Vector2< float > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector2< float > const & reference is null");
    return 0;
  } 
  result = (Vector2< float > *)new Vector2< float >((Vector2< float > const &)*arg1);
  *(Vector2< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_westerholmgmail_v_lauri_tunnelescape_ShapeModuleJNI_Vector2f_1getPointer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Vector2< float > *arg1 = (Vector2< float > *) 0 ;
  Vector2< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Vector2< float > **)&jarg1; 
  result = (Vector2< float > *)(arg1)->getPointer();
  *(Vector2< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_westerholmgmail_v_lauri_tunnelescape_ShapeModuleJNI_Vector2f_1getX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Vector2< float > *arg1 = (Vector2< float > *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Vector2< float > **)&jarg1; 
  result = (float)((Vector2< float > const *)arg1)->getX();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_westerholmgmail_v_lauri_tunnelescape_ShapeModuleJNI_Vector2f_1getY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Vector2< float > *arg1 = (Vector2< float > *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Vector2< float > **)&jarg1; 
  result = (float)((Vector2< float > const *)arg1)->getY();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_westerholmgmail_v_lauri_tunnelescape_ShapeModuleJNI_Vector2f_1update(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  Vector2< float > *arg1 = (Vector2< float > *) 0 ;
  float arg2 ;
  float arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Vector2< float > **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->update(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_westerholmgmail_v_lauri_tunnelescape_ShapeModuleJNI_Vector2f_1normalize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Vector2< float > *arg1 = (Vector2< float > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Vector2< float > **)&jarg1; 
  (arg1)->normalize();
}


SWIGEXPORT jfloat JNICALL Java_com_westerholmgmail_v_lauri_tunnelescape_ShapeModuleJNI_Vector2f_1dotProduct(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jfloat jresult = 0 ;
  Vector2< float > *arg1 = (Vector2< float > *) 0 ;
  Vector2< float > *arg2 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Vector2< float > **)&jarg1; 
  arg2 = *(Vector2< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector2< float > const & reference is null");
    return 0;
  } 
  result = (float)((Vector2< float > const *)arg1)->dotProduct((Vector2< float > const &)*arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_westerholmgmail_v_lauri_tunnelescape_ShapeModuleJNI_Vector2f_1rotate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  jlong jresult = 0 ;
  Vector2< float > *arg1 = (Vector2< float > *) 0 ;
  float arg2 ;
  Vector2< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Vector2< float > **)&jarg1; 
  arg2 = (float)jarg2; 
  result = (Vector2< float > *) &(arg1)->rotate(arg2);
  *(Vector2< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_westerholmgmail_v_lauri_tunnelescape_ShapeModuleJNI_Vector2f_1getAngle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Vector2< float > *arg1 = (Vector2< float > *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Vector2< float > **)&jarg1; 
  result = (float)((Vector2< float > const *)arg1)->getAngle();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_westerholmgmail_v_lauri_tunnelescape_ShapeModuleJNI_Vector2f_1getLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Vector2< float > *arg1 = (Vector2< float > *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Vector2< float > **)&jarg1; 
  result = (float)((Vector2< float > const *)arg1)->getLength();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_westerholmgmail_v_lauri_tunnelescape_ShapeModuleJNI_dotProduct_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jfloat jresult = 0 ;
  Vector2< float > *arg1 = 0 ;
  Vector2< float > *arg2 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Vector2< float > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector2< float > const & reference is null");
    return 0;
  } 
  arg2 = *(Vector2< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector2< float > const & reference is null");
    return 0;
  } 
  result = (float)dotProduct((Vector2< float > const &)*arg1,(Vector2< float > const &)*arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_westerholmgmail_v_lauri_tunnelescape_ShapeModuleJNI_delete_1Vector2f(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Vector2< float > *arg1 = (Vector2< float > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Vector2< float > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_westerholmgmail_v_lauri_tunnelescape_ShapeModuleJNI_Vector2fDeque_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::deque< Vector2f > *arg1 = (std::deque< Vector2f > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::deque< Vector2f > **)&jarg1; 
  result = (bool)((std::deque< Vector2f > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_westerholmgmail_v_lauri_tunnelescape_ShapeModuleJNI_new_1Vector2fDeque_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::deque< Vector2f > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::deque< Vector2f > *)new std::deque< Vector2f >();
  *(std::deque< Vector2f > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_westerholmgmail_v_lauri_tunnelescape_ShapeModuleJNI_new_1Vector2fDeque_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  Vector2< float > *arg2 = 0 ;
  std::deque< Vector2f > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = (unsigned int)jarg1; 
  arg2 = *(Vector2< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector2< float > const & reference is null");
    return 0;
  } 
  result = (std::deque< Vector2f > *)new std::deque< Vector2f >(arg1,(Vector2< float > const &)*arg2);
  *(std::deque< Vector2f > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_westerholmgmail_v_lauri_tunnelescape_ShapeModuleJNI_new_1Vector2fDeque_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  std::deque< Vector2f > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  result = (std::deque< Vector2f > *)new std::deque< Vector2f >(arg1);
  *(std::deque< Vector2f > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_westerholmgmail_v_lauri_tunnelescape_ShapeModuleJNI_new_1Vector2fDeque_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::deque< Vector2< float > > *arg1 = 0 ;
  std::deque< Vector2f > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::deque< Vector2< float > > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::deque< Vector2< float > > const & reference is null");
    return 0;
  } 
  result = (std::deque< Vector2f > *)new std::deque< Vector2f >((std::deque< Vector2< float > > const &)*arg1);
  *(std::deque< Vector2f > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_westerholmgmail_v_lauri_tunnelescape_ShapeModuleJNI_delete_1Vector2fDeque(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::deque< Vector2f > *arg1 = (std::deque< Vector2f > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::deque< Vector2f > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_westerholmgmail_v_lauri_tunnelescape_ShapeModuleJNI_Vector2fDeque_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  std::deque< Vector2f > *arg1 = (std::deque< Vector2f > *) 0 ;
  unsigned int arg2 ;
  Vector2< float > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::deque< Vector2f > **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = *(Vector2< float > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector2< float > const & reference is null");
    return ;
  } 
  (arg1)->assign(arg2,(Vector2< float > const &)*arg3);
}


SWIGEXPORT void JNICALL Java_com_westerholmgmail_v_lauri_tunnelescape_ShapeModuleJNI_Vector2fDeque_1swap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::deque< Vector2f > *arg1 = (std::deque< Vector2f > *) 0 ;
  std::deque< Vector2< float > > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::deque< Vector2f > **)&jarg1; 
  arg2 = *(std::deque< Vector2< float > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::deque< Vector2< float > > & reference is null");
    return ;
  } 
  (arg1)->swap(*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_westerholmgmail_v_lauri_tunnelescape_ShapeModuleJNI_Vector2fDeque_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::deque< Vector2f > *arg1 = (std::deque< Vector2f > *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::deque< Vector2f > **)&jarg1; 
  result = (unsigned int)((std::deque< Vector2f > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_westerholmgmail_v_lauri_tunnelescape_ShapeModuleJNI_Vector2fDeque_1max_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::deque< Vector2f > *arg1 = (std::deque< Vector2f > *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::deque< Vector2f > **)&jarg1; 
  result = (unsigned int)((std::deque< Vector2f > const *)arg1)->max_size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_westerholmgmail_v_lauri_tunnelescape_ShapeModuleJNI_Vector2fDeque_1resize_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  std::deque< Vector2f > *arg1 = (std::deque< Vector2f > *) 0 ;
  unsigned int arg2 ;
  Vector2< float > arg3 ;
  Vector2< float > *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::deque< Vector2f > **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  argp3 = *(Vector2< float > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Vector2< float >");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->resize(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_westerholmgmail_v_lauri_tunnelescape_ShapeModuleJNI_Vector2fDeque_1resize_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::deque< Vector2f > *arg1 = (std::deque< Vector2f > *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::deque< Vector2f > **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_westerholmgmail_v_lauri_tunnelescape_ShapeModuleJNI_Vector2fDeque_1front(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::deque< Vector2f > *arg1 = (std::deque< Vector2f > *) 0 ;
  std::deque< Vector2< float > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::deque< Vector2f > **)&jarg1; 
  result = (std::deque< Vector2< float > >::value_type *) &(arg1)->front();
  *(std::deque< Vector2< float > >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_westerholmgmail_v_lauri_tunnelescape_ShapeModuleJNI_Vector2fDeque_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::deque< Vector2f > *arg1 = (std::deque< Vector2f > *) 0 ;
  std::deque< Vector2< float > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::deque< Vector2f > **)&jarg1; 
  result = (std::deque< Vector2< float > >::value_type *) &(arg1)->back();
  *(std::deque< Vector2< float > >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_westerholmgmail_v_lauri_tunnelescape_ShapeModuleJNI_Vector2fDeque_1push_1front(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::deque< Vector2f > *arg1 = (std::deque< Vector2f > *) 0 ;
  Vector2< float > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::deque< Vector2f > **)&jarg1; 
  arg2 = *(Vector2< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector2< float > const & reference is null");
    return ;
  } 
  (arg1)->push_front((Vector2< float > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_westerholmgmail_v_lauri_tunnelescape_ShapeModuleJNI_Vector2fDeque_1push_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::deque< Vector2f > *arg1 = (std::deque< Vector2f > *) 0 ;
  Vector2< float > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::deque< Vector2f > **)&jarg1; 
  arg2 = *(Vector2< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector2< float > const & reference is null");
    return ;
  } 
  (arg1)->push_back((Vector2< float > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_westerholmgmail_v_lauri_tunnelescape_ShapeModuleJNI_Vector2fDeque_1pop_1front(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::deque< Vector2f > *arg1 = (std::deque< Vector2f > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::deque< Vector2f > **)&jarg1; 
  (arg1)->pop_front();
}


SWIGEXPORT void JNICALL Java_com_westerholmgmail_v_lauri_tunnelescape_ShapeModuleJNI_Vector2fDeque_1pop_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::deque< Vector2f > *arg1 = (std::deque< Vector2f > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::deque< Vector2f > **)&jarg1; 
  (arg1)->pop_back();
}


SWIGEXPORT void JNICALL Java_com_westerholmgmail_v_lauri_tunnelescape_ShapeModuleJNI_Vector2fDeque_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::deque< Vector2f > *arg1 = (std::deque< Vector2f > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::deque< Vector2f > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_com_westerholmgmail_v_lauri_tunnelescape_ShapeModuleJNI_Vector2fDeque_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::deque< Vector2f > *arg1 = (std::deque< Vector2f > *) 0 ;
  int arg2 ;
  std::deque< Vector2< float > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::deque< Vector2f > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::deque< Vector2< float > >::value_type *) &std_deque_Sl_Vector2f_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::deque< Vector2< float > >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_westerholmgmail_v_lauri_tunnelescape_ShapeModuleJNI_Vector2fDeque_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::deque< Vector2f > *arg1 = (std::deque< Vector2f > *) 0 ;
  int arg2 ;
  Vector2< float > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::deque< Vector2f > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(Vector2< float > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector2< float > const & reference is null");
    return ;
  } 
  try {
    std_deque_Sl_Vector2f_Sg__setitem(arg1,arg2,(Vector2< float > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_westerholmgmail_v_lauri_tunnelescape_ShapeModuleJNI_Vector2fDeque_1delitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::deque< Vector2f > *arg1 = (std::deque< Vector2f > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::deque< Vector2f > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_deque_Sl_Vector2f_Sg__delitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT jlong JNICALL Java_com_westerholmgmail_v_lauri_tunnelescape_ShapeModuleJNI_Vector2fDeque_1getslice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  std::deque< Vector2f > *arg1 = (std::deque< Vector2f > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::deque< Vector2< float > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::deque< Vector2f > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = std_deque_Sl_Vector2f_Sg__getslice(arg1,arg2,arg3);
  *(std::deque< Vector2< float > > **)&jresult = new std::deque< Vector2< float > >((const std::deque< Vector2< float > > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_westerholmgmail_v_lauri_tunnelescape_ShapeModuleJNI_Vector2fDeque_1setslice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jlong jarg4, jobject jarg4_) {
  std::deque< Vector2f > *arg1 = (std::deque< Vector2f > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::deque< Vector2< float > > *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(std::deque< Vector2f > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = *(std::deque< Vector2< float > > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::deque< Vector2< float > > const & reference is null");
    return ;
  } 
  std_deque_Sl_Vector2f_Sg__setslice(arg1,arg2,arg3,(std::deque< Vector2< float > > const &)*arg4);
}


SWIGEXPORT void JNICALL Java_com_westerholmgmail_v_lauri_tunnelescape_ShapeModuleJNI_Vector2fDeque_1delslice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::deque< Vector2f > *arg1 = (std::deque< Vector2f > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::deque< Vector2f > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  std_deque_Sl_Vector2f_Sg__delslice(arg1,arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_westerholmgmail_v_lauri_tunnelescape_ShapeModuleJNI_new_1Vector2fVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< Vector2f > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< Vector2f > *)new std::vector< Vector2f >();
  *(std::vector< Vector2f > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_westerholmgmail_v_lauri_tunnelescape_ShapeModuleJNI_new_1Vector2fVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< Vector2< float > >::size_type arg1 ;
  std::vector< Vector2f > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< Vector2< float > >::size_type)jarg1; 
  result = (std::vector< Vector2f > *)new std::vector< Vector2f >(arg1);
  *(std::vector< Vector2f > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_westerholmgmail_v_lauri_tunnelescape_ShapeModuleJNI_Vector2fVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< Vector2f > *arg1 = (std::vector< Vector2f > *) 0 ;
  std::vector< Vector2< float > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Vector2f > **)&jarg1; 
  result = ((std::vector< Vector2f > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_westerholmgmail_v_lauri_tunnelescape_ShapeModuleJNI_Vector2fVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< Vector2f > *arg1 = (std::vector< Vector2f > *) 0 ;
  std::vector< Vector2< float > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Vector2f > **)&jarg1; 
  result = ((std::vector< Vector2f > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_westerholmgmail_v_lauri_tunnelescape_ShapeModuleJNI_Vector2fVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< Vector2f > *arg1 = (std::vector< Vector2f > *) 0 ;
  std::vector< Vector2< float > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Vector2f > **)&jarg1; 
  arg2 = (std::vector< Vector2< float > >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_westerholmgmail_v_lauri_tunnelescape_ShapeModuleJNI_Vector2fVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< Vector2f > *arg1 = (std::vector< Vector2f > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Vector2f > **)&jarg1; 
  result = (bool)((std::vector< Vector2f > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_westerholmgmail_v_lauri_tunnelescape_ShapeModuleJNI_Vector2fVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< Vector2f > *arg1 = (std::vector< Vector2f > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Vector2f > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_westerholmgmail_v_lauri_tunnelescape_ShapeModuleJNI_Vector2fVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< Vector2f > *arg1 = (std::vector< Vector2f > *) 0 ;
  std::vector< Vector2< float > >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< Vector2f > **)&jarg1; 
  arg2 = *(std::vector< Vector2< float > >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< Vector2< float > >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< Vector2< float > >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_westerholmgmail_v_lauri_tunnelescape_ShapeModuleJNI_Vector2fVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< Vector2f > *arg1 = (std::vector< Vector2f > *) 0 ;
  int arg2 ;
  std::vector< Vector2< float > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Vector2f > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< Vector2< float > >::value_type *) &std_vector_Sl_Vector2f_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< Vector2< float > >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_westerholmgmail_v_lauri_tunnelescape_ShapeModuleJNI_Vector2fVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< Vector2f > *arg1 = (std::vector< Vector2f > *) 0 ;
  int arg2 ;
  std::vector< Vector2< float > >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< Vector2f > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< Vector2< float > >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< Vector2< float > >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_Vector2f_Sg__set(arg1,arg2,(Vector2< float > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_westerholmgmail_v_lauri_tunnelescape_ShapeModuleJNI_delete_1Vector2fVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< Vector2f > *arg1 = (std::vector< Vector2f > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< Vector2f > **)&jarg1; 
  delete arg1;
}


#ifdef __cplusplus
}
#endif

